package cn.lijuntao;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.2.2
 * 2018-03-01T17:40:46.581+08:00
 * Generated source version: 3.2.2
 *
 */
@WebServiceClient(name = "TestService",
                  wsdlLocation = "http://127.0.0.1:8082/services/TestService?wsdl",
                  targetNamespace = "http://service.axis2.lijuntao.cn")
public class TestService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://service.axis2.lijuntao.cn", "TestService");
    public final static QName TestServiceHttpSoap12Endpoint = new QName("http://service.axis2.lijuntao.cn", "TestServiceHttpSoap12Endpoint");
    public final static QName TestServiceHttpEndpoint = new QName("http://service.axis2.lijuntao.cn", "TestServiceHttpEndpoint");
    public final static QName TestServiceHttpSoap11Endpoint = new QName("http://service.axis2.lijuntao.cn", "TestServiceHttpSoap11Endpoint");
    static {
        URL url = null;
        try {
            url = new URL("http://127.0.0.1:8082/services/TestService?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(TestService.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "http://127.0.0.1:8082/services/TestService?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public TestService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public TestService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public TestService() {
        super(WSDL_LOCATION, SERVICE);
    }

    public TestService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public TestService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public TestService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns TestServicePortType
     */
    @WebEndpoint(name = "TestServiceHttpSoap12Endpoint")
    public TestServicePortType getTestServiceHttpSoap12Endpoint() {
        return super.getPort(TestServiceHttpSoap12Endpoint, TestServicePortType.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TestServicePortType
     */
    @WebEndpoint(name = "TestServiceHttpSoap12Endpoint")
    public TestServicePortType getTestServiceHttpSoap12Endpoint(WebServiceFeature... features) {
        return super.getPort(TestServiceHttpSoap12Endpoint, TestServicePortType.class, features);
    }


    /**
     *
     * @return
     *     returns TestServicePortType
     */
    @WebEndpoint(name = "TestServiceHttpEndpoint")
    public TestServicePortType getTestServiceHttpEndpoint() {
        return super.getPort(TestServiceHttpEndpoint, TestServicePortType.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TestServicePortType
     */
    @WebEndpoint(name = "TestServiceHttpEndpoint")
    public TestServicePortType getTestServiceHttpEndpoint(WebServiceFeature... features) {
        return super.getPort(TestServiceHttpEndpoint, TestServicePortType.class, features);
    }


    /**
     *
     * @return
     *     returns TestServicePortType
     */
    @WebEndpoint(name = "TestServiceHttpSoap11Endpoint")
    public TestServicePortType getTestServiceHttpSoap11Endpoint() {
        return super.getPort(TestServiceHttpSoap11Endpoint, TestServicePortType.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TestServicePortType
     */
    @WebEndpoint(name = "TestServiceHttpSoap11Endpoint")
    public TestServicePortType getTestServiceHttpSoap11Endpoint(WebServiceFeature... features) {
        return super.getPort(TestServiceHttpSoap11Endpoint, TestServicePortType.class, features);
    }

}
